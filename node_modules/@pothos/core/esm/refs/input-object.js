/* eslint-disable max-classes-per-file */ function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import { inputShapeKey } from '../types/index.js';
import BaseTypeRef from './base.js';
let _inputShapeKey = inputShapeKey;
class InputObjectRef extends BaseTypeRef {
    constructor(name) {
        super("InputObject", name);
        _define_property(this, "kind", "InputObject");
        _define_property(this, "$inferInput", void 0);
        _define_property(this, _inputShapeKey, void 0);
    }
}
export { InputObjectRef as default };
export class ImplementableInputObjectRef extends InputObjectRef {
    implement(options) {
        this.builder.inputType(this, options);
        return this;
    }
    constructor(builder, name) {
        super(name);
        _define_property(this, "builder", void 0);
        this.builder = builder;
    }
}
//# sourceMappingURL=input-object.js.map
