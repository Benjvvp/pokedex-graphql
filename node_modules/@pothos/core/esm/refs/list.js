function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import { outputShapeKey, parentShapeKey } from '../types/index.js';
import BaseTypeRef from './base.js';
let _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey;
class ListRef extends BaseTypeRef {
    constructor(listType, nullable) {
        super("List", `List<${String(listType)}>`);
        _define_property(this, "kind", "List");
        _define_property(this, "$inferType", void 0);
        _define_property(this, _outputShapeKey, void 0);
        _define_property(this, _parentShapeKey, void 0);
        _define_property(this, "listType", void 0);
        _define_property(this, "nullable", void 0);
        this.listType = listType;
        this.nullable = nullable;
    }
}
export { ListRef as default };
//# sourceMappingURL=list.js.map
