import FieldRef from './refs/field.js';
import InputFieldRef from './refs/input-field.js';
import type { ConfigurableRef, FieldMap, GraphQLFieldKind, InputFieldMap, InputType, InputTypeParam, InterfaceParam, ObjectParam, OutputType, PothosFieldConfig, PothosObjectTypeConfig, PothosTypeConfig, SchemaTypes, TypeParam } from './types/index.js';
export default class ConfigStore<Types extends SchemaTypes> {
    typeConfigs: Map<string, PothosTypeConfig>;
    private fieldRefs;
    private fields;
    private pendingActions;
    private refsToName;
    private scalarsToRefs;
    private fieldRefsToConfigs;
    private pendingFields;
    private pendingRefResolutions;
    private fieldRefCallbacks;
    private pending;
    constructor();
    hasConfig(typeParam: InputType<Types> | OutputType<Types>): boolean;
    addUnionTypes(typeName: string, unionTypes: ObjectParam<Types>[] | (() => ObjectParam<Types>[])): void;
    addInterfaces(typeName: string, interfaces: InterfaceParam<Types>[] | (() => InterfaceParam<Types>[])): void;
    addFieldRef(ref: FieldRef | InputFieldRef, typeParam: InputTypeParam<Types> | TypeParam<Types>, args: InputFieldMap, getConfig: (name: string, parentField: string | undefined, typeConfig: PothosTypeConfig) => PothosFieldConfig<Types>): void;
    createFieldConfig<T extends GraphQLFieldKind>(ref: FieldRef | InputFieldRef, name: string, typeConfig: PothosTypeConfig, parentField?: string, kind?: T): Extract<PothosFieldConfig<Types>, {
        graphqlKind: T;
    }>;
    associateRefWithName(ref: ConfigurableRef<Types>, name: string): void;
    addTypeConfig(config: PothosTypeConfig, ref?: ConfigurableRef<Types>): void;
    getTypeConfig<T extends PothosTypeConfig["kind"]>(ref: ConfigurableRef<Types> | string, kind?: T): Extract<import("./types/index.js").PothosEnumTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosInputObjectTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosInterfaceTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosMutationTypeConfig, {
        kind: T;
    }> | Extract<PothosObjectTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosQueryTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosScalarTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosSubscriptionTypeConfig, {
        kind: T;
    }> | Extract<import("./types/index.js").PothosUnionTypeConfig, {
        kind: T;
    }>;
    getInputTypeRef(ref: ConfigurableRef<Types> | string): InputType<Types>;
    getOutputTypeRef(ref: ConfigurableRef<Types> | string): OutputType<Types>;
    onTypeConfig(ref: ConfigurableRef<Types>, cb: (config: PothosTypeConfig) => void): void;
    onFieldUse(ref: FieldRef | InputFieldRef, cb: (config: PothosFieldConfig<Types>) => void): void;
    getFields<T extends GraphQLFieldKind>(name: string, kind?: T): Map<string, Extract<PothosFieldConfig<Types>, {
        graphqlKind: T;
    }>>;
    prepareForBuild(): void;
    onPrepare(cb: () => void): void;
    addFields(typeRef: ConfigurableRef<Types>, fields: FieldMap | InputFieldMap | (() => FieldMap | InputFieldMap)): void;
    getImplementers(ref: ConfigurableRef<Types> | string): PothosObjectTypeConfig[];
    private describeRef;
    private buildFields;
    private buildField;
}
//# sourceMappingURL=config-store.d.ts.map
