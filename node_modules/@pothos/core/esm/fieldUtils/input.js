function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import InputFieldRef from '../refs/input-field.js';
import InputListRef from '../refs/input-list.js';
import { inputTypeFromParam } from '../utils/index.js';
class InputFieldBuilder {
    argBuilder() {
        const builder = this.field.bind(this);
        const protoKeys = Object.keys(Object.getPrototypeOf(this)).filter((key) => typeof this[key] === "function" && Function.prototype[key] === undefined);
        [
            ...Object.keys(this),
            ...protoKeys
        ].forEach((key) => {
            builder[key] = typeof this[key] === "function" ? this[key].bind(this) : this[key];
        });
        return builder;
    }
    /**
   * Create in input field or argument for the current type
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ field(options) {
        const ref = new InputFieldRef(this.kind, this.typename);
        this.builder.configStore.addFieldRef(ref, options.type, {}, (name, parentField, typeConfig) => {
            var _options_required;
            return {
                name,
                parentField,
                kind: this.kind,
                graphqlKind: this.kind,
                parentType: typeConfig.name,
                type: inputTypeFromParam(options.type, this.builder.configStore, (_options_required = options.required) !== null && _options_required !== void 0 ? _options_required : this.builder.defaultInputFieldRequiredness),
                pothosOptions: options,
                description: options.description,
                deprecationReason: options.deprecationReason,
                defaultValue: options.defaultValue,
                extensions: options.extensions
            };
        });
        return ref;
    }
    helper(type) {
        return (...args) => {
            const [options = {}] = args;
            return this.field({
                ...options,
                type
            });
        };
    }
    constructor(builder, kind, typename) {
        _define_property(this, "builder", void 0);
        _define_property(this, "kind", void 0);
        _define_property(this, "typename", void 0);
        /**
   * Create a Boolean input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "boolean", this.helper("Boolean"));
        /**
   * Create a Float input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "float", this.helper("Float"));
        /**
   * Create a ID input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "id", this.helper("ID"));
        /**
   * Create a Int input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "int", this.helper("Int"));
        /**
   * Create a String input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "string", this.helper("String"));
        /**
   * Create a Boolean list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "booleanList", this.helper([
            "Boolean"
        ]));
        /**
   * Create a Float list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "floatList", this.helper([
            "Float"
        ]));
        /**
   * Create a ID list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "idList", this.helper([
            "ID"
        ]));
        /**
   * Create a Int list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "intList", this.helper([
            "Int"
        ]));
        /**
   * Create a String list input field
   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
   */ _define_property(this, "stringList", this.helper([
            "String"
        ]));
        _define_property(this, "listRef", (type, options) => {
            var _options_required;
            return new InputListRef(type, (_options_required = options === null || options === void 0 ? void 0 : options.required) !== null && _options_required !== void 0 ? _options_required : true);
        });
        this.builder = builder;
        this.kind = kind;
        this.typename = typename;
    }
}
export { InputFieldBuilder as default };
//# sourceMappingURL=input.js.map
