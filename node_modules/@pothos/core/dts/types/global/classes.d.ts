import type Builder from '../../builder';
import type InternalFieldBuilder from '../../fieldUtils/builder';
import type InternalInputFieldBuilder from '../../fieldUtils/input';
import type InternalRootFieldBuilder from '../../fieldUtils/root';
import type InternalBaseRef from '../../refs/base';
import type InternalEnumRef from '../../refs/enum';
import type InternalInputListRef from '../../refs/input-list';
import type InternalInputObjectRef from '../../refs/input-object';
import type InternalInterfaceRef from '../../refs/interface';
import type InternalListRef from '../../refs/list';
import type InternalObjectRef from '../../refs/object';
import type InternalScalarRef from '../../refs/scalar';
import type InternalUnionRef from '../../refs/union';
import type { FieldKind } from '../builder-options';
import type { SchemaTypes } from '../schema-types';
declare global {
    export namespace PothosSchemaTypes {
        interface SchemaBuilder<Types extends SchemaTypes> extends Builder<Types> {
        }
        interface RootFieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalRootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface FieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalFieldBuilder<Types, ParentShape, Kind>, RootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface QueryFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Query'> {
        }
        interface MutationFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Mutation'> {
        }
        interface SubscriptionFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Subscription'> {
        }
        interface ObjectFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Object'> {
        }
        interface InterfaceFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Interface'> {
        }
        interface InputFieldBuilder<Types extends SchemaTypes, Kind extends 'Arg' | 'InputObject'> extends InternalInputFieldBuilder<Types, Kind> {
        }
        interface BaseTypeRef extends InternalBaseRef {
        }
        interface EnumRef<T, U = T> extends InternalEnumRef<T, U> {
        }
        interface InputObjectRef<T> extends InternalInputObjectRef<T> {
        }
        interface InputListRef<Types extends SchemaTypes, T> extends InternalInputListRef<Types, T> {
        }
        interface InterfaceRef<T, P = T> extends InternalInterfaceRef<T, P> {
        }
        interface ObjectRef<T, P = T> extends InternalObjectRef<T, P> {
        }
        interface ScalarRef<T, U, P = T> extends InternalScalarRef<T, U, P> {
        }
        interface UnionRef<T, P = T> extends InternalUnionRef<T, P> {
        }
        interface ListRef<Types extends SchemaTypes, T, P = T> extends InternalListRef<Types, T, P> {
        }
    }
}
//# sourceMappingURL=classes.d.ts.map