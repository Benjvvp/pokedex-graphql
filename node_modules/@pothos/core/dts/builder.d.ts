import { GraphQLScalarSerializer, GraphQLScalarType, GraphQLSchema } from 'graphql';
import ConfigStore from './config-store';
import EnumRef from './refs/enum';
import InputObjectRef, { ImplementableInputObjectRef } from './refs/input-object';
import InterfaceRef, { ImplementableInterfaceRef } from './refs/interface';
import ObjectRef, { ImplementableObjectRef } from './refs/object';
import ScalarRef from './refs/scalar';
import UnionRef from './refs/union';
import type { AbstractReturnShape, BaseEnum, EnumParam, EnumTypeOptions, EnumValues, InputFieldMap, InputFieldsFromShape, InputShape, InputShapeFromFields, InterfaceFieldsShape, InterfaceFieldThunk, InterfaceParam, InterfaceTypeOptions, MutationFieldsShape, MutationFieldThunk, NormalizeArgs, NormalizeSchemeBuilderOptions, ObjectFieldsShape, ObjectFieldThunk, ObjectParam, ObjectTypeOptions, OutputShape, ParentShape, PluginConstructorMap, QueryFieldsShape, QueryFieldThunk, ScalarName, SchemaTypes, ShapeFromEnumValues, SubscriptionFieldsShape, SubscriptionFieldThunk, ValuesFromEnum } from './types';
export default class SchemaBuilder<Types extends SchemaTypes> {
    static plugins: Partial<PluginConstructorMap<SchemaTypes>>;
    static allowPluginReRegistration: boolean;
    configStore: ConfigStore<Types>;
    options: NormalizeSchemeBuilderOptions<Types>;
    defaultFieldNullability: boolean;
    defaultInputFieldRequiredness: boolean;
    constructor(options: NormalizeSchemeBuilderOptions<Types>);
    static registerPlugin<T extends keyof PluginConstructorMap<SchemaTypes>>(name: T, plugin: PluginConstructorMap<SchemaTypes>[T]): void;
    objectType<Interfaces extends InterfaceParam<Types>[], Param extends ObjectParam<Types>>(param: Param, options: ObjectTypeOptions<Types, Param, ParentShape<Types, Param>, Interfaces>, fields?: ObjectFieldsShape<Types, ParentShape<Types, Param>>): ObjectRef<OutputShape<Types, Param>, ParentShape<Types, Param>>;
    objectFields<Type extends ObjectParam<Types>>(ref: Type, fields: ObjectFieldsShape<Types, ParentShape<Types, Type>>): void;
    objectField<Type extends ObjectParam<Types>>(ref: Type, fieldName: string, field: ObjectFieldThunk<Types, ParentShape<Types, Type>>): void;
    queryType(...args: NormalizeArgs<[
        options: PothosSchemaTypes.QueryTypeOptions<Types>,
        fields?: QueryFieldsShape<Types>
    ], 0>): ObjectRef<OutputShape<Types, "Query">, "Query" extends infer T ? T extends "Query" ? T extends keyof Types["outputShapes"] ? Types["outputShapes"][T] : T extends BaseEnum ? ValuesFromEnum<T> : never : never : never>;
    queryFields(fields: QueryFieldsShape<Types>): void;
    queryField(name: string, field: QueryFieldThunk<Types>): void;
    mutationType(...args: NormalizeArgs<[
        options: PothosSchemaTypes.MutationTypeOptions<Types>,
        fields?: MutationFieldsShape<Types>
    ], 0>): void;
    mutationFields(fields: MutationFieldsShape<Types>): void;
    mutationField(name: string, field: MutationFieldThunk<Types>): void;
    subscriptionType(...args: NormalizeArgs<[
        options: PothosSchemaTypes.SubscriptionTypeOptions<Types>,
        fields?: SubscriptionFieldsShape<Types>
    ], 0>): void;
    subscriptionFields(fields: SubscriptionFieldsShape<Types>): void;
    subscriptionField(name: string, field: SubscriptionFieldThunk<Types>): void;
    args<Shape extends InputFieldMap>(fields: (t: PothosSchemaTypes.InputFieldBuilder<Types, 'Arg'>) => Shape): Shape;
    interfaceType<Param extends InterfaceParam<Types>, Interfaces extends InterfaceParam<Types>[], ResolveType>(param: Param, options: InterfaceTypeOptions<Types, Param, ParentShape<Types, Param>, Interfaces, ResolveType>, fields?: InterfaceFieldsShape<Types, ParentShape<Types, Param>>): InterfaceRef<AbstractReturnShape<Types, Param, ResolveType>, ParentShape<Types, Param>>;
    interfaceFields<Type extends InterfaceParam<Types>>(ref: Type, fields: InterfaceFieldsShape<Types, ParentShape<Types, Type>>): void;
    interfaceField<Type extends InterfaceParam<Types>>(ref: Type, fieldName: string, field: InterfaceFieldThunk<Types, ParentShape<Types, Type>>): void;
    unionType<Member extends ObjectParam<Types>, ResolveType>(name: string, options: PothosSchemaTypes.UnionTypeOptions<Types, Member, ResolveType>): UnionRef<AbstractReturnShape<Types, Member, ResolveType>, ParentShape<Types, Member>>;
    enumType<Param extends EnumParam, Values extends EnumValues<Types>>(param: Param, options: EnumTypeOptions<Types, Param, Values>): EnumRef<Param extends BaseEnum ? ValuesFromEnum<Param> : ShapeFromEnumValues<Types, Values>, Param extends BaseEnum ? ValuesFromEnum<Param> : ShapeFromEnumValues<Types, Values>>;
    scalarType<Name extends ScalarName<Types>>(name: Name, options: PothosSchemaTypes.ScalarTypeOptions<Types, InputShape<Types, Name>, ParentShape<Types, Name>>): ScalarRef<InputShape<Types, Name>, ParentShape<Types, Name>, InputShape<Types, Name>>;
    addScalarType<Name extends ScalarName<Types>>(name: Name, scalar: GraphQLScalarType, ...args: NormalizeArgs<[
        options: Omit<PothosSchemaTypes.ScalarTypeOptions<Types, InputShape<Types, Name>, OutputShape<Types, Name>>, 'serialize'> & {
            serialize?: GraphQLScalarSerializer<OutputShape<Types, Name>>;
        }
    ]>): ScalarRef<InputShape<Types, Name>, ParentShape<Types, Name>, InputShape<Types, Name>>;
    inputType<Param extends InputObjectRef<unknown> | string, Fields extends Param extends PothosSchemaTypes.InputObjectRef<unknown> ? InputFieldsFromShape<InputShape<Types, Param>> : Param extends keyof Types['Inputs'] ? InputFieldsFromShape<InputShape<Types, Param>> : InputFieldMap>(param: Param, options: PothosSchemaTypes.InputObjectTypeOptions<Types, Fields>): PothosSchemaTypes.InputObjectRef<InputShapeFromFields<Fields>>;
    inputRef<T extends object>(name: string): ImplementableInputObjectRef<Types, T>;
    objectRef<T>(name: string): ImplementableObjectRef<Types, T>;
    interfaceRef<T>(name: string): ImplementableInterfaceRef<Types, T>;
    toSchema(...args: NormalizeArgs<[options?: PothosSchemaTypes.BuildSchemaOptions<Types>]>): GraphQLSchema;
}
//# sourceMappingURL=builder.d.ts.map