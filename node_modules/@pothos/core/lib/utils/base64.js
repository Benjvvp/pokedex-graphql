/* eslint-disable @typescript-eslint/prefer-ts-expect-error */ /* eslint-disable @typescript-eslint/ban-ts-comment */ /* eslint-disable no-restricted-globals */ /* eslint-disable @typescript-eslint/no-invalid-this */ /* eslint-disable node/no-unsupported-features/es-builtins */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    decodeBase64: function() {
        return decodeBase64;
    },
    encodeBase64: function() {
        return encodeBase64;
    }
});
const _errors = require("../errors");
const getGlobalThis = ()=>{
    if (typeof globalThis !== 'undefined') return globalThis;
    // @ts-ignore
    if (typeof self !== 'undefined') return self;
    // @ts-ignore
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    if (void 0 !== undefined) return void 0;
    throw new Error('Unable to locate global `this`');
};
function encodeBase64(value) {
    const globalThis1 = getGlobalThis();
    if (typeof globalThis1.Buffer === 'function') {
        return globalThis1.Buffer.from(value).toString('base64');
    }
    if (typeof globalThis1.btoa === 'function') {
        return globalThis1.btoa(value);
    }
    throw new Error('Unable to locate global `Buffer` or `btoa`');
}
const base64Regex = /^(?:[\d+/A-Za-z]{4})*(?:[\d+/A-Za-z]{2}==|[\d+/A-Za-z]{3}=)?$/;
function decodeBase64(value) {
    if (!base64Regex.test(value)) {
        throw new _errors.PothosValidationError('Invalid base64 string');
    }
    const globalThis1 = getGlobalThis();
    if (typeof globalThis1.Buffer === 'function') {
        return globalThis1.Buffer.from(value, 'base64').toString();
    }
    if (typeof globalThis1.atob === 'function') {
        return globalThis1.atob(value);
    }
    throw new Error('Unable to locate global `Buffer` or `atob`');
}

//# sourceMappingURL=base64.js.map