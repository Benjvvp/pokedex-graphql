"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return BaseFieldUtil;
    }
});
const _graphql = require("graphql");
const _errors = require("../errors");
const _field = /*#__PURE__*/ _interop_require_default(require("../refs/field"));
const _utils = require("../utils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class BaseFieldUtil {
    createField(// eslint-disable-next-line @typescript-eslint/no-explicit-any
    options) {
        const ref = new _field.default(this.kind, this.typename);
        var _options_args;
        this.builder.configStore.addFieldRef(ref, options.type, (_options_args = options.args) !== null && _options_args !== void 0 ? _options_args : {}, (name, parentField, typeConfig)=>{
            var _options_extensions;
            const args = {};
            if (options.args) {
                Object.keys(options.args).forEach((argName)=>{
                    const argRef = options.args[argName];
                    args[argName] = this.builder.configStore.createFieldConfig(argRef, argName, typeConfig, name, 'Arg');
                });
            }
            var _options_resolve;
            let resolve = (_options_resolve = options.resolve) !== null && _options_resolve !== void 0 ? _options_resolve : ()=>{
                throw new _errors.PothosSchemaError(`Not implemented: No resolver found for ${this.typename}.${name}`);
            };
            if (((_options_extensions = options.extensions) === null || _options_extensions === void 0 ? void 0 : _options_extensions.pothosExposedField) === name) {
                resolve = _graphql.defaultFieldResolver;
            }
            const { subscribe } = options;
            var _options_nullable;
            return {
                kind: this.kind,
                graphqlKind: this.graphqlKind,
                parentType: typeConfig.name,
                name,
                args,
                type: (0, _utils.typeFromParam)(options.type, this.builder.configStore, (_options_nullable = options.nullable) !== null && _options_nullable !== void 0 ? _options_nullable : this.builder.defaultFieldNullability),
                pothosOptions: options,
                extensions: {
                    pothosOriginalResolve: resolve,
                    pothosOriginalSubscribe: subscribe,
                    ...options.extensions
                },
                description: options.description,
                deprecationReason: options.deprecationReason,
                resolve,
                subscribe
            };
        });
        return ref;
    }
    exposeField(name, { extensions, ...options }) {
        return this.createField({
            ...options,
            extensions: {
                pothosExposedField: name,
                ...extensions
            },
            resolve: (parent)=>parent[name]
        });
    }
    constructor(name, builder, kind, graphqlKind){
        _define_property(this, "typename", void 0);
        _define_property(this, "builder", void 0);
        _define_property(this, "kind", void 0);
        _define_property(this, "graphqlKind", void 0);
        this.typename = name;
        this.builder = builder;
        this.kind = kind;
        this.graphqlKind = graphqlKind;
    }
}

//# sourceMappingURL=base.js.map