"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return InputFieldRef;
    }
});
const _types = require("../types");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
let _inputFieldShapeKey = _types.inputFieldShapeKey;
class InputFieldRef {
    toString() {
        var _this_argFor;
        if (this.kind !== 'Arg') {
            if (this.fieldName) {
                return `${this.parentTypename}.${this.fieldName}`;
            }
            return this.parentTypename;
        }
        var _this_argFor_fieldName;
        const fieldName = (_this_argFor_fieldName = (_this_argFor = this.argFor) === null || _this_argFor === void 0 ? void 0 : _this_argFor.fieldName) !== null && _this_argFor_fieldName !== void 0 ? _this_argFor_fieldName : '[unnamed field]';
        var _this_fieldName;
        const argName = (_this_fieldName = this.fieldName) !== null && _this_fieldName !== void 0 ? _this_fieldName : '[unnamed argument]';
        return `${this.parentTypename}.${fieldName}(${argName})`;
    }
    constructor(kind, parentTypename){
        _define_property(this, "kind", void 0);
        _define_property(this, "parentTypename", void 0);
        _define_property(this, "fieldName", void 0);
        _define_property(this, "argFor", void 0);
        _define_property(this, "$inferInput", void 0);
        _define_property(this, _inputFieldShapeKey, void 0);
        this.kind = kind;
        this.parentTypename = parentTypename;
    }
}

//# sourceMappingURL=input-field.js.map