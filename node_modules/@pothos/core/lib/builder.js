"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return SchemaBuilder;
    }
});
const _graphql = require("graphql");
const _buildcache = /*#__PURE__*/ _interop_require_default(require("./build-cache"));
const _configstore = /*#__PURE__*/ _interop_require_default(require("./config-store"));
const _errors = require("./errors");
const _input = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/input"));
const _interface = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/interface"));
const _mutation = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/mutation"));
const _object = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/object"));
const _query = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/query"));
const _subscription = /*#__PURE__*/ _interop_require_default(require("./fieldUtils/subscription"));
const _base = /*#__PURE__*/ _interop_require_default(require("./refs/base"));
const _enum = /*#__PURE__*/ _interop_require_default(require("./refs/enum"));
const _inputobject = /*#__PURE__*/ _interop_require_wildcard(require("./refs/input-object"));
const _interface1 = /*#__PURE__*/ _interop_require_wildcard(require("./refs/interface"));
const _object1 = /*#__PURE__*/ _interop_require_wildcard(require("./refs/object"));
const _scalar = /*#__PURE__*/ _interop_require_default(require("./refs/scalar"));
const _union = /*#__PURE__*/ _interop_require_default(require("./refs/union"));
const _utils = require("./utils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class SchemaBuilder {
    static registerPlugin(name, plugin) {
        if (!this.allowPluginReRegistration && this.plugins[name]) {
            throw new _errors.PothosError(`Received multiple implementations for plugin ${name}`);
        }
        this.plugins[name] = plugin;
    }
    objectType(param, options, fields) {
        (0, _utils.verifyRef)(param);
        (0, _utils.verifyInterfaces)(options.interfaces);
        var _options_name;
        const name = typeof param === 'string' ? param : (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : param.name;
        if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {
            throw new _errors.PothosSchemaError(`Invalid object name ${name} use .create${name}Type() instead`);
        }
        const ref = param instanceof _base.default ? param : new _object1.default(name);
        const config = {
            kind: 'Object',
            graphqlKind: 'Object',
            name,
            interfaces: [],
            description: options.description,
            extensions: options.extensions,
            isTypeOf: options.isTypeOf,
            pothosOptions: options
        };
        this.configStore.addTypeConfig(config, ref);
        if (options.interfaces) {
            this.configStore.addInterfaces(name, options.interfaces);
        }
        if (typeof param === 'function') {
            this.configStore.associateRefWithName(param, name);
        }
        if (fields) {
            this.configStore.addFields(ref, ()=>fields(new _object.default(name, this)));
        }
        if (options.fields) {
            this.configStore.addFields(ref, ()=>{
                const t = new _object.default(name, this);
                return options.fields(t);
            });
        }
        return ref;
    }
    objectFields(ref, fields) {
        (0, _utils.verifyRef)(ref);
        this.configStore.onTypeConfig(ref, ({ name })=>{
            this.configStore.addFields(ref, ()=>fields(new _object.default(name, this)));
        });
    }
    objectField(ref, fieldName, field) {
        (0, _utils.verifyRef)(ref);
        this.configStore.onTypeConfig(ref, ({ name })=>{
            this.configStore.addFields(ref, ()=>({
                    [fieldName]: field(new _object.default(name, this))
                }));
        });
    }
    queryType(...args) {
        const [options = {}, fields] = args;
        const config = {
            kind: 'Query',
            graphqlKind: 'Object',
            name: 'Query',
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions
        };
        const ref = new _object1.default('Query');
        this.configStore.addTypeConfig(config, ref);
        if (fields) {
            this.configStore.addFields('Query', ()=>fields(new _query.default(this)));
        }
        if (options.fields) {
            this.configStore.addFields('Query', ()=>options.fields(new _query.default(this)));
        }
        return ref;
    }
    queryFields(fields) {
        this.configStore.addFields('Query', ()=>fields(new _query.default(this)));
    }
    queryField(name, field) {
        this.configStore.addFields('Query', ()=>({
                [name]: field(new _query.default(this))
            }));
    }
    mutationType(...args) {
        const [options = {}, fields] = args;
        const config = {
            kind: 'Mutation',
            graphqlKind: 'Object',
            name: 'Mutation',
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config);
        if (fields) {
            this.configStore.addFields('Mutation', ()=>fields(new _mutation.default(this)));
        }
        if (options.fields) {
            this.configStore.addFields('Mutation', ()=>options.fields(new _mutation.default(this)));
        }
    }
    mutationFields(fields) {
        this.configStore.addFields('Mutation', ()=>fields(new _mutation.default(this)));
    }
    mutationField(name, field) {
        this.configStore.addFields('Mutation', ()=>({
                [name]: field(new _mutation.default(this))
            }));
    }
    subscriptionType(...args) {
        const [options = {}, fields] = args;
        const config = {
            kind: 'Subscription',
            graphqlKind: 'Object',
            name: 'Subscription',
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config);
        if (fields) {
            this.configStore.addFields('Subscription', ()=>fields(new _subscription.default(this)));
        }
        if (options.fields) {
            this.configStore.addFields('Subscription', ()=>options.fields(new _subscription.default(this)));
        }
    }
    subscriptionFields(fields) {
        this.configStore.addFields('Subscription', ()=>fields(new _subscription.default(this)));
    }
    subscriptionField(name, field) {
        this.configStore.addFields('Subscription', ()=>({
                [name]: field(new _subscription.default(this))
            }));
    }
    args(fields) {
        return fields(new _input.default(this, 'Arg', '[unknown]'));
    }
    interfaceType(param, options, fields) {
        (0, _utils.verifyRef)(param);
        (0, _utils.verifyInterfaces)(options.interfaces);
        var _options_name;
        const name = typeof param === 'string' ? param : (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : param.name;
        const ref = param instanceof _base.default ? param : new _interface1.default(name);
        const typename = ref.name;
        const config = {
            kind: 'Interface',
            graphqlKind: 'Interface',
            name: typename,
            interfaces: [],
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions,
            resolveType: options.resolveType
        };
        this.configStore.addTypeConfig(config, ref);
        if (options.interfaces) {
            this.configStore.addInterfaces(typename, options.interfaces);
        }
        if (typeof param === 'function') {
            this.configStore.associateRefWithName(param, name);
        }
        if (fields) {
            this.configStore.addFields(ref, ()=>fields(new _interface.default(typename, this)));
        }
        if (options.fields) {
            this.configStore.addFields(ref, ()=>options.fields(new _interface.default(typename, this)));
        }
        return ref;
    }
    interfaceFields(ref, fields) {
        (0, _utils.verifyRef)(ref);
        this.configStore.onTypeConfig(ref, ({ name })=>{
            this.configStore.addFields(ref, ()=>fields(new _interface.default(name, this)));
        });
    }
    interfaceField(ref, fieldName, field) {
        (0, _utils.verifyRef)(ref);
        this.configStore.onTypeConfig(ref, ({ name })=>{
            this.configStore.addFields(ref, ()=>({
                    [fieldName]: field(new _interface.default(name, this))
                }));
        });
    }
    unionType(name, options) {
        const ref = new _union.default(name);
        if (Array.isArray(options.types)) {
            options.types.forEach((type)=>{
                (0, _utils.verifyRef)(type);
            });
        }
        const config = {
            kind: 'Union',
            graphqlKind: 'Union',
            name,
            types: [],
            description: options.description,
            resolveType: options.resolveType,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config, ref);
        this.configStore.addUnionTypes(name, options.types);
        return ref;
    }
    enumType(param, options) {
        (0, _utils.verifyRef)(param);
        const name = typeof param === 'string' ? param : options.name;
        const ref = new _enum.default(name);
        const values = typeof param === 'object' ? (0, _utils.valuesFromEnum)(// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        param, options === null || options === void 0 ? void 0 : options.values) : (0, _utils.normalizeEnumValues)(options.values);
        const config = {
            kind: 'Enum',
            graphqlKind: 'Enum',
            name,
            values,
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config, ref);
        if (typeof param !== 'string') {
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            this.configStore.associateRefWithName(param, name);
        }
        return ref;
    }
    scalarType(name, options) {
        const ref = new _scalar.default(name);
        const config = {
            kind: 'Scalar',
            graphqlKind: 'Scalar',
            name,
            description: options.description,
            parseLiteral: options.parseLiteral,
            parseValue: options.parseValue,
            serialize: options.serialize,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config, ref);
        return ref;
    }
    addScalarType(name, scalar, ...args) {
        const [options = {}] = args;
        const config = scalar.toConfig();
        return this.scalarType(name, {
            ...config,
            ...options,
            extensions: {
                ...config.extensions,
                ...options.extensions
            }
        });
    }
    inputType(param, options) {
        (0, _utils.verifyRef)(param);
        const name = typeof param === 'string' ? param : param.name;
        const ref = typeof param === 'string' ? new _inputobject.default(name) : param;
        const config = {
            kind: 'InputObject',
            graphqlKind: 'InputObject',
            name,
            isOneOf: options.isOneOf,
            description: options.description,
            pothosOptions: options,
            extensions: options.extensions
        };
        this.configStore.addTypeConfig(config, ref);
        this.configStore.addFields(ref, ()=>options.fields(new _input.default(this, 'InputObject', name)));
        return ref;
    }
    inputRef(name) {
        return new _inputobject.ImplementableInputObjectRef(this, name);
    }
    objectRef(name) {
        return new _object1.ImplementableObjectRef(this, name);
    }
    interfaceRef(name) {
        return new _interface1.ImplementableInterfaceRef(this, name);
    }
    toSchema(...args) {
        const [options = {}] = args;
        const { directives, extensions } = options;
        const scalars = [
            _graphql.GraphQLID,
            _graphql.GraphQLInt,
            _graphql.GraphQLFloat,
            _graphql.GraphQLString,
            _graphql.GraphQLBoolean
        ];
        scalars.forEach((scalar)=>{
            if (!this.configStore.hasConfig(scalar.name)) {
                this.addScalarType(scalar.name, scalar);
            }
        });
        const buildCache = new _buildcache.default(this, options);
        buildCache.plugin.beforeBuild();
        buildCache.buildAll();
        const builtTypes = [
            ...buildCache.types.values()
        ];
        const schema = new _graphql.GraphQLSchema({
            query: buildCache.types.get('Query'),
            mutation: buildCache.types.get('Mutation'),
            subscription: buildCache.types.get('Subscription'),
            extensions: extensions !== null && extensions !== void 0 ? extensions : {},
            directives: directives,
            types: builtTypes
        });
        const processedSchema = buildCache.plugin.afterBuild(schema);
        return options.sortSchema === false ? processedSchema : (0, _graphql.lexicographicSortSchema)(processedSchema);
    }
    constructor(options){
        _define_property(this, "configStore", void 0);
        _define_property(this, "options", void 0);
        _define_property(this, "defaultFieldNullability", void 0);
        _define_property(this, "defaultInputFieldRequiredness", void 0);
        this.options = options;
        this.configStore = new _configstore.default();
        var _options_defaultFieldNullability;
        this.defaultFieldNullability = (_options_defaultFieldNullability = options.defaultFieldNullability) !== null && _options_defaultFieldNullability !== void 0 ? _options_defaultFieldNullability : false;
        var _options_defaultInputFieldRequiredness;
        this.defaultInputFieldRequiredness = (_options_defaultInputFieldRequiredness = options.defaultInputFieldRequiredness) !== null && _options_defaultInputFieldRequiredness !== void 0 ? _options_defaultInputFieldRequiredness : false;
    }
}
_define_property(SchemaBuilder, "plugins", {});
_define_property(SchemaBuilder, "allowPluginReRegistration", false);

//# sourceMappingURL=builder.js.map